
Voltmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00002686  0000271a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800196  00800196  00002850  2**0
                  ALLOC
  3 .stab         00001e84  00000000  00000000  00002850  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dcd  00000000  00000000  000046d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000054a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00005621  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000057f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00007802  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00008963  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009968  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  00009b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  00009dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 11 	call	0x2264	; 0x2264 <main>
      8a:	0c 94 41 13 	jmp	0x2682	; 0x2682 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 36 13 	jmp	0x266c	; 0x266c <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	eb 57       	subi	r30, 0x7B	; 123
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <ADC_vidInit>:

static 	void (*ADC_ISR_PTR) (void);


void ADC_vidInit (void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	ADMUX_REG = (ADC_VREF << REFS0) | (ADC_RES_ADJUST <<ADLAR);
     ca8:	e7 e2       	ldi	r30, 0x27	; 39
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 e4       	ldi	r24, 0x40	; 64
     cae:	80 83       	st	Z, r24

	ADCSRA_REG = (1<<ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     cb0:	e6 e2       	ldi	r30, 0x26	; 38
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	87 e8       	ldi	r24, 0x87	; 135
     cb6:	80 83       	st	Z, r24

#if (ADC_MOD == ADC_INT)
	ADCSRA_REG|=(1<<ADC_INT);
     cb8:	a6 e2       	ldi	r26, 0x26	; 38
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e6 e2       	ldi	r30, 0x26	; 38
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	82 60       	ori	r24, 0x02	; 2
     cc4:	8c 93       	st	X, r24
#endif
}
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <ADC_EnableINT>:


void ADC_EnableINT(void)
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	ADCSRA_REG|=(1<<ADC_INT);
     cd4:	a6 e2       	ldi	r26, 0x26	; 38
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e6 e2       	ldi	r30, 0x26	; 38
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	82 60       	ori	r24, 0x02	; 2
     ce0:	8c 93       	st	X, r24
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <ADC_DisableINT>:

void ADC_DisableINT(void)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	ADCSRA_REG&=~(1<<ADC_INT);
     cf0:	a6 e2       	ldi	r26, 0x26	; 38
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e6 e2       	ldi	r30, 0x26	; 38
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8d 7f       	andi	r24, 0xFD	; 253
     cfc:	8c 93       	st	X, r24
}
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <ADC_u16GetADCRead>:

u16 ADC_u16GetADCRead (u8 ChId)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01
	ChId = ChId & 0b00000111;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	87 70       	andi	r24, 0x07	; 7
     d14:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG = (ADMUX_REG & 0xf8) | ChId ;
     d16:	a7 e2       	ldi	r26, 0x27	; 39
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e2       	ldi	r30, 0x27	; 39
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	98 2f       	mov	r25, r24
     d22:	98 7f       	andi	r25, 0xF8	; 248
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	89 2b       	or	r24, r25
     d28:	8c 93       	st	X, r24
	ADCSRA_REG |= (1<<ADSC);
     d2a:	a6 e2       	ldi	r26, 0x26	; 38
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e6 e2       	ldi	r30, 0x26	; 38
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 64       	ori	r24, 0x40	; 64
     d36:	8c 93       	st	X, r24
	while (!(ADCSRA_REG & (1<<ADIF)));
     d38:	e6 e2       	ldi	r30, 0x26	; 38
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	80 71       	andi	r24, 0x10	; 16
     d44:	90 70       	andi	r25, 0x00	; 0
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	b9 f3       	breq	.-18     	; 0xd38 <ADC_u16GetADCRead+0x34>
	return ADCRES_REG;
     d4a:	e4 e2       	ldi	r30, 0x24	; 36
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
}
     d52:	0f 90       	pop	r0
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <ADC_StartConversion>:


#if (ADC_MOD == ADC_INT)
void ADC_StartConversion(u8 ChId)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	0f 92       	push	r0
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	89 83       	std	Y+1, r24	; 0x01
	ChId = ChId & 0b00000111;
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	87 70       	andi	r24, 0x07	; 7
     d6a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG = (ADMUX_REG & 0xf8) | ChId ;
     d6c:	a7 e2       	ldi	r26, 0x27	; 39
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e7 e2       	ldi	r30, 0x27	; 39
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	98 2f       	mov	r25, r24
     d78:	98 7f       	andi	r25, 0xF8	; 248
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	89 2b       	or	r24, r25
     d7e:	8c 93       	st	X, r24
	ADCSRA_REG |= (1<<ADSC);
     d80:	a6 e2       	ldi	r26, 0x26	; 38
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e6 e2       	ldi	r30, 0x26	; 38
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 64       	ori	r24, 0x40	; 64
     d8c:	8c 93       	st	X, r24
}
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <ADC_u16GetConvertedDig>:

u16 ADC_u16GetConvertedDig(void)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	return ADCRES_REG;
     d9e:	e4 e2       	ldi	r30, 0x24	; 36
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
}
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <ADC_SetISR>:

void ADC_SetISR(void (*p)(void))
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <ADC_SetISR+0x6>
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
	ADC_ISR_PTR= p;
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	90 93 97 01 	sts	0x0197, r25
     dc2:	80 93 96 01 	sts	0x0196, r24
}
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <__vector_16>:


ISR(ADC_vect)
{
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	11 24       	eor	r1, r1
     dda:	2f 93       	push	r18
     ddc:	3f 93       	push	r19
     dde:	4f 93       	push	r20
     de0:	5f 93       	push	r21
     de2:	6f 93       	push	r22
     de4:	7f 93       	push	r23
     de6:	8f 93       	push	r24
     de8:	9f 93       	push	r25
     dea:	af 93       	push	r26
     dec:	bf 93       	push	r27
     dee:	ef 93       	push	r30
     df0:	ff 93       	push	r31
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
	ADC_ISR_PTR();
     dfa:	e0 91 96 01 	lds	r30, 0x0196
     dfe:	f0 91 97 01 	lds	r31, 0x0197
     e02:	09 95       	icall
}
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	ff 91       	pop	r31
     e0a:	ef 91       	pop	r30
     e0c:	bf 91       	pop	r27
     e0e:	af 91       	pop	r26
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	7f 91       	pop	r23
     e16:	6f 91       	pop	r22
     e18:	5f 91       	pop	r21
     e1a:	4f 91       	pop	r20
     e1c:	3f 91       	pop	r19
     e1e:	2f 91       	pop	r18
     e20:	0f 90       	pop	r0
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	0f 90       	pop	r0
     e26:	1f 90       	pop	r1
     e28:	18 95       	reti

00000e2a <DC_MotorSetDirection>:
#include "DC_Motor.h"
#include "DC_MotorConfig.h"
#include <util/delay.h>

void DC_MotorSetDirection(u8 Copy_Direction)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	6d 97       	sbiw	r28, 0x1d	; 29
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	8d 8f       	std	Y+29, r24	; 0x1d
	if (Copy_Direction==LEFT)
     e40:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	09 f0       	breq	.+2      	; 0xe48 <DC_MotorSetDirection+0x1e>
     e46:	7f c0       	rjmp	.+254    	; 0xf46 <DC_MotorSetDirection+0x11c>
	{
		DC_MotorStop();
     e48:	0e 94 2e 08 	call	0x105c	; 0x105c <DC_MotorStop>
		DIO_vidSetPinVal(DC_MOTOR_PORT,DC_MOTOR_ControlPin2,DIO_HIGH);
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
		DIO_vidSetPinVal(DC_MOTOR_PORT,DC_MOTOR_ControlPin1,DIO_LOW);
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	aa e7       	ldi	r26, 0x7A	; 122
     e66:	b4 e4       	ldi	r27, 0x44	; 68
     e68:	89 8f       	std	Y+25, r24	; 0x19
     e6a:	9a 8f       	std	Y+26, r25	; 0x1a
     e6c:	ab 8f       	std	Y+27, r26	; 0x1b
     e6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	69 8d       	ldd	r22, Y+25	; 0x19
     e72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a ef       	ldi	r20, 0xFA	; 250
     e7e:	54 e4       	ldi	r21, 0x44	; 68
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8d 8b       	std	Y+21, r24	; 0x15
     e8a:	9e 8b       	std	Y+22, r25	; 0x16
     e8c:	af 8b       	std	Y+23, r26	; 0x17
     e8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e90:	6d 89       	ldd	r22, Y+21	; 0x15
     e92:	7e 89       	ldd	r23, Y+22	; 0x16
     e94:	8f 89       	ldd	r24, Y+23	; 0x17
     e96:	98 8d       	ldd	r25, Y+24	; 0x18
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <DC_MotorSetDirection+0x88>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9c 8b       	std	Y+20, r25	; 0x14
     eae:	8b 8b       	std	Y+19, r24	; 0x13
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <DC_MotorSetDirection+0x106>
	else if (__tmp > 65535)
     eb2:	6d 89       	ldd	r22, Y+21	; 0x15
     eb4:	7e 89       	ldd	r23, Y+22	; 0x16
     eb6:	8f 89       	ldd	r24, Y+23	; 0x17
     eb8:	98 8d       	ldd	r25, Y+24	; 0x18
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <DC_MotorSetDirection+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	69 8d       	ldd	r22, Y+25	; 0x19
     ecc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ece:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9c 8b       	std	Y+20, r25	; 0x14
     ef0:	8b 8b       	std	Y+19, r24	; 0x13
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <DC_MotorSetDirection+0xe8>
     ef4:	88 ec       	ldi	r24, 0xC8	; 200
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9a 8b       	std	Y+18, r25	; 0x12
     efa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     efc:	89 89       	ldd	r24, Y+17	; 0x11
     efe:	9a 89       	ldd	r25, Y+18	; 0x12
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <DC_MotorSetDirection+0xd6>
     f04:	9a 8b       	std	Y+18, r25	; 0x12
     f06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8b 89       	ldd	r24, Y+19	; 0x13
     f0a:	9c 89       	ldd	r25, Y+20	; 0x14
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9c 8b       	std	Y+20, r25	; 0x14
     f10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8b 89       	ldd	r24, Y+19	; 0x13
     f14:	9c 89       	ldd	r25, Y+20	; 0x14
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <DC_MotorSetDirection+0xca>
     f1a:	97 c0       	rjmp	.+302    	; 0x104a <DC_MotorSetDirection+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9c 8b       	std	Y+20, r25	; 0x14
     f2e:	8b 8b       	std	Y+19, r24	; 0x13
     f30:	8b 89       	ldd	r24, Y+19	; 0x13
     f32:	9c 89       	ldd	r25, Y+20	; 0x14
     f34:	98 8b       	std	Y+16, r25	; 0x10
     f36:	8f 87       	std	Y+15, r24	; 0x0f
     f38:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3a:	98 89       	ldd	r25, Y+16	; 0x10
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <DC_MotorSetDirection+0x112>
     f40:	98 8b       	std	Y+16, r25	; 0x10
     f42:	8f 87       	std	Y+15, r24	; 0x0f
     f44:	82 c0       	rjmp	.+260    	; 0x104a <DC_MotorSetDirection+0x220>
		_delay_ms(1000);
	}
	else if (Copy_Direction==RIGHT)
     f46:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	09 f0       	breq	.+2      	; 0xf4e <DC_MotorSetDirection+0x124>
     f4c:	7e c0       	rjmp	.+252    	; 0x104a <DC_MotorSetDirection+0x220>
	{
		DC_MotorStop();
     f4e:	0e 94 2e 08 	call	0x105c	; 0x105c <DC_MotorStop>
		DIO_vidSetPinVal(DC_MOTOR_PORT,DC_MOTOR_ControlPin1,DIO_HIGH);
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
		DIO_vidSetPinVal(DC_MOTOR_PORT,DC_MOTOR_ControlPin2,DIO_LOW);
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	aa e7       	ldi	r26, 0x7A	; 122
     f6c:	b4 e4       	ldi	r27, 0x44	; 68
     f6e:	8b 87       	std	Y+11, r24	; 0x0b
     f70:	9c 87       	std	Y+12, r25	; 0x0c
     f72:	ad 87       	std	Y+13, r26	; 0x0d
     f74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f76:	6b 85       	ldd	r22, Y+11	; 0x0b
     f78:	7c 85       	ldd	r23, Y+12	; 0x0c
     f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	4a ef       	ldi	r20, 0xFA	; 250
     f84:	54 e4       	ldi	r21, 0x44	; 68
     f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8f 83       	std	Y+7, r24	; 0x07
     f90:	98 87       	std	Y+8, r25	; 0x08
     f92:	a9 87       	std	Y+9, r26	; 0x09
     f94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f96:	6f 81       	ldd	r22, Y+7	; 0x07
     f98:	78 85       	ldd	r23, Y+8	; 0x08
     f9a:	89 85       	ldd	r24, Y+9	; 0x09
     f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5f e3       	ldi	r21, 0x3F	; 63
     fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     faa:	88 23       	and	r24, r24
     fac:	2c f4       	brge	.+10     	; 0xfb8 <DC_MotorSetDirection+0x18e>
		__ticks = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9e 83       	std	Y+6, r25	; 0x06
     fb4:	8d 83       	std	Y+5, r24	; 0x05
     fb6:	3f c0       	rjmp	.+126    	; 0x1036 <DC_MotorSetDirection+0x20c>
	else if (__tmp > 65535)
     fb8:	6f 81       	ldd	r22, Y+7	; 0x07
     fba:	78 85       	ldd	r23, Y+8	; 0x08
     fbc:	89 85       	ldd	r24, Y+9	; 0x09
     fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	4f e7       	ldi	r20, 0x7F	; 127
     fc6:	57 e4       	ldi	r21, 0x47	; 71
     fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fcc:	18 16       	cp	r1, r24
     fce:	4c f5       	brge	.+82     	; 0x1022 <DC_MotorSetDirection+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9e 83       	std	Y+6, r25	; 0x06
     ff6:	8d 83       	std	Y+5, r24	; 0x05
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <DC_MotorSetDirection+0x1ee>
     ffa:	88 ec       	ldi	r24, 0xC8	; 200
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9c 83       	std	Y+4, r25	; 0x04
    1000:	8b 83       	std	Y+3, r24	; 0x03
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <DC_MotorSetDirection+0x1dc>
    100a:	9c 83       	std	Y+4, r25	; 0x04
    100c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	69 f7       	brne	.-38     	; 0xffa <DC_MotorSetDirection+0x1d0>
    1020:	14 c0       	rjmp	.+40     	; 0x104a <DC_MotorSetDirection+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1022:	6f 81       	ldd	r22, Y+7	; 0x07
    1024:	78 85       	ldd	r23, Y+8	; 0x08
    1026:	89 85       	ldd	r24, Y+9	; 0x09
    1028:	9a 85       	ldd	r25, Y+10	; 0x0a
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	8d 83       	std	Y+5, r24	; 0x05
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	9e 81       	ldd	r25, Y+6	; 0x06
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <DC_MotorSetDirection+0x218>
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}

}
    104a:	6d 96       	adiw	r28, 0x1d	; 29
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <DC_MotorStop>:
void DC_MotorStop(void)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	2e 97       	sbiw	r28, 0x0e	; 14
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
	DIO_vidSetPinVal(DC_MOTOR_PORT,DC_MOTOR_ControlPin1,DIO_LOW);
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
	DIO_vidSetPinVal(DC_MOTOR_PORT,DC_MOTOR_ControlPin2,DIO_LOW);
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a8 e4       	ldi	r26, 0x48	; 72
    108a:	b3 e4       	ldi	r27, 0x43	; 67
    108c:	8b 87       	std	Y+11, r24	; 0x0b
    108e:	9c 87       	std	Y+12, r25	; 0x0c
    1090:	ad 87       	std	Y+13, r26	; 0x0d
    1092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1094:	6b 85       	ldd	r22, Y+11	; 0x0b
    1096:	7c 85       	ldd	r23, Y+12	; 0x0c
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	4a ef       	ldi	r20, 0xFA	; 250
    10a2:	54 e4       	ldi	r21, 0x44	; 68
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	8f 83       	std	Y+7, r24	; 0x07
    10ae:	98 87       	std	Y+8, r25	; 0x08
    10b0:	a9 87       	std	Y+9, r26	; 0x09
    10b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b4:	6f 81       	ldd	r22, Y+7	; 0x07
    10b6:	78 85       	ldd	r23, Y+8	; 0x08
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <DC_MotorStop+0x7a>
		__ticks = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	3f c0       	rjmp	.+126    	; 0x1154 <DC_MotorStop+0xf8>
	else if (__tmp > 65535)
    10d6:	6f 81       	ldd	r22, Y+7	; 0x07
    10d8:	78 85       	ldd	r23, Y+8	; 0x08
    10da:	89 85       	ldd	r24, Y+9	; 0x09
    10dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	3f ef       	ldi	r19, 0xFF	; 255
    10e2:	4f e7       	ldi	r20, 0x7F	; 127
    10e4:	57 e4       	ldi	r21, 0x47	; 71
    10e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	4c f5       	brge	.+82     	; 0x1140 <DC_MotorStop+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e2       	ldi	r20, 0x20	; 32
    10fc:	51 e4       	ldi	r21, 0x41	; 65
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <DC_MotorStop+0xda>
    1118:	88 ec       	ldi	r24, 0xC8	; 200
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <DC_MotorStop+0xc8>
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	69 f7       	brne	.-38     	; 0x1118 <DC_MotorStop+0xbc>
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <DC_MotorStop+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1140:	6f 81       	ldd	r22, Y+7	; 0x07
    1142:	78 85       	ldd	r23, Y+8	; 0x08
    1144:	89 85       	ldd	r24, Y+9	; 0x09
    1146:	9a 85       	ldd	r25, Y+10	; 0x0a
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <DC_MotorStop+0x104>
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

}
    1168:	2e 96       	adiw	r28, 0x0e	; 14
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <DIO_vidSetPinVal>:
#include "LIB/BIT_MATH.h"
#include "DIO_Interface.h"
#include "DIO_Priv.h"

void DIO_vidSetPinVal(u8 PortId, u8 PinId, u8 val)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	27 97       	sbiw	r28, 0x07	; 7
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	6a 83       	std	Y+2, r22	; 0x02
    1192:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	08 f0       	brcs	.+2      	; 0x119c <DIO_vidSetPinVal+0x22>
    119a:	ee c0       	rjmp	.+476    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <DIO_vidSetPinVal+0x2a>
    11a2:	ea c0       	rjmp	.+468    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
	{
		if (val == DIO_LOW)
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 23       	and	r24, r24
    11a8:	09 f0       	breq	.+2      	; 0x11ac <DIO_vidSetPinVal+0x32>
    11aa:	74 c0       	rjmp	.+232    	; 0x1294 <DIO_vidSetPinVal+0x11a>
		{
			switch(PortId)
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3f 83       	std	Y+7, r19	; 0x07
    11b4:	2e 83       	std	Y+6, r18	; 0x06
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	59 f1       	breq	.+86     	; 0x1216 <DIO_vidSetPinVal+0x9c>
    11c0:	2e 81       	ldd	r18, Y+6	; 0x06
    11c2:	3f 81       	ldd	r19, Y+7	; 0x07
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <DIO_vidSetPinVal+0x5a>
    11ca:	8e 81       	ldd	r24, Y+6	; 0x06
    11cc:	9f 81       	ldd	r25, Y+7	; 0x07
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	69 f0       	breq	.+26     	; 0x11ec <DIO_vidSetPinVal+0x72>
    11d2:	d2 c0       	rjmp	.+420    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
    11d4:	2e 81       	ldd	r18, Y+6	; 0x06
    11d6:	3f 81       	ldd	r19, Y+7	; 0x07
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	89 f1       	breq	.+98     	; 0x1240 <DIO_vidSetPinVal+0xc6>
    11de:	8e 81       	ldd	r24, Y+6	; 0x06
    11e0:	9f 81       	ldd	r25, Y+7	; 0x07
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DIO_vidSetPinVal+0x70>
    11e8:	40 c0       	rjmp	.+128    	; 0x126a <DIO_vidSetPinVal+0xf0>
    11ea:	c6 c0       	rjmp	.+396    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
			{
				case DIO_PORTA: CLR_BIT(PORTA_REG, PinId); break ;
    11ec:	ab e3       	ldi	r26, 0x3B	; 59
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	eb e3       	ldi	r30, 0x3B	; 59
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_vidSetPinVal+0x90>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_vidSetPinVal+0x8c>
    120e:	80 95       	com	r24
    1210:	84 23       	and	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	b1 c0       	rjmp	.+354    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
				case DIO_PORTB: CLR_BIT(PORTB_REG, PinId); break ;
    1216:	a8 e3       	ldi	r26, 0x38	; 56
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e8 e3       	ldi	r30, 0x38	; 56
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_vidSetPinVal+0xba>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_vidSetPinVal+0xb6>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	9c c0       	rjmp	.+312    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
				case DIO_PORTC: CLR_BIT(PORTC_REG, PinId); break ;
    1240:	a5 e3       	ldi	r26, 0x35	; 53
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e3       	ldi	r30, 0x35	; 53
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_vidSetPinVal+0xe4>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_vidSetPinVal+0xe0>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	87 c0       	rjmp	.+270    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
				case DIO_PORTD: CLR_BIT(PORTD_REG, PinId); break ;
    126a:	a2 e3       	ldi	r26, 0x32	; 50
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e2 e3       	ldi	r30, 0x32	; 50
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_vidSetPinVal+0x10e>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_vidSetPinVal+0x10a>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	72 c0       	rjmp	.+228    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
			}
		}
		else if (val == DIO_HIGH)
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	09 f0       	breq	.+2      	; 0x129c <DIO_vidSetPinVal+0x122>
    129a:	6e c0       	rjmp	.+220    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
		{
			switch(PortId)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3d 83       	std	Y+5, r19	; 0x05
    12a4:	2c 83       	std	Y+4, r18	; 0x04
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	49 f1       	breq	.+82     	; 0x1302 <DIO_vidSetPinVal+0x188>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <DIO_vidSetPinVal+0x14a>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	61 f0       	breq	.+24     	; 0x12da <DIO_vidSetPinVal+0x160>
    12c2:	5a c0       	rjmp	.+180    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
    12c4:	2c 81       	ldd	r18, Y+4	; 0x04
    12c6:	3d 81       	ldd	r19, Y+5	; 0x05
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	71 f1       	breq	.+92     	; 0x132a <DIO_vidSetPinVal+0x1b0>
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	91 05       	cpc	r25, r1
    12d6:	e9 f1       	breq	.+122    	; 0x1352 <DIO_vidSetPinVal+0x1d8>
    12d8:	4f c0       	rjmp	.+158    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
			{
			case DIO_PORTA: SET_BIT(PORTA_REG, PinId); break ;
    12da:	ab e3       	ldi	r26, 0x3B	; 59
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	eb e3       	ldi	r30, 0x3B	; 59
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_vidSetPinVal+0x17e>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_vidSetPinVal+0x17a>
    12fc:	84 2b       	or	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	3b c0       	rjmp	.+118    	; 0x1378 <DIO_vidSetPinVal+0x1fe>
			case DIO_PORTB: SET_BIT(PORTB_REG, PinId); break ;
    1302:	a8 e3       	ldi	r26, 0x38	; 56
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e8 e3       	ldi	r30, 0x38	; 56
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_vidSetPinVal+0x1a6>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_vidSetPinVal+0x1a2>
    1324:	84 2b       	or	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	27 c0       	rjmp	.+78     	; 0x1378 <DIO_vidSetPinVal+0x1fe>
			case DIO_PORTC: SET_BIT(PORTC_REG, PinId); break ;
    132a:	a5 e3       	ldi	r26, 0x35	; 53
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e3       	ldi	r30, 0x35	; 53
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_vidSetPinVal+0x1ce>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_vidSetPinVal+0x1ca>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	13 c0       	rjmp	.+38     	; 0x1378 <DIO_vidSetPinVal+0x1fe>
			case DIO_PORTD: SET_BIT(PORTD_REG, PinId); break ;
    1352:	a2 e3       	ldi	r26, 0x32	; 50
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e2 e3       	ldi	r30, 0x32	; 50
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_vidSetPinVal+0x1f6>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_vidSetPinVal+0x1f2>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
	}
	else
	{
		//report error
	}
}
    1378:	27 96       	adiw	r28, 0x07	; 7
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <DIO_vidSetPinDir>:

void DIO_vidSetPinDir(u8 PortId, u8 PinId, u8 dir)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	27 97       	sbiw	r28, 0x07	; 7
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	6a 83       	std	Y+2, r22	; 0x02
    13a2:	4b 83       	std	Y+3, r20	; 0x03
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <DIO_vidSetPinDir+0x22>
    13aa:	ee c0       	rjmp	.+476    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	88 30       	cpi	r24, 0x08	; 8
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <DIO_vidSetPinDir+0x2a>
    13b2:	ea c0       	rjmp	.+468    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
		{
			if (dir == DIO_INPUT)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 23       	and	r24, r24
    13b8:	09 f0       	breq	.+2      	; 0x13bc <DIO_vidSetPinDir+0x32>
    13ba:	74 c0       	rjmp	.+232    	; 0x14a4 <DIO_vidSetPinDir+0x11a>
			{
				switch(PortId)
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3f 83       	std	Y+7, r19	; 0x07
    13c4:	2e 83       	std	Y+6, r18	; 0x06
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	91 05       	cpc	r25, r1
    13ce:	59 f1       	breq	.+86     	; 0x1426 <DIO_vidSetPinDir+0x9c>
    13d0:	2e 81       	ldd	r18, Y+6	; 0x06
    13d2:	3f 81       	ldd	r19, Y+7	; 0x07
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <DIO_vidSetPinDir+0x5a>
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	9f 81       	ldd	r25, Y+7	; 0x07
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	69 f0       	breq	.+26     	; 0x13fc <DIO_vidSetPinDir+0x72>
    13e2:	d2 c0       	rjmp	.+420    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
    13e4:	2e 81       	ldd	r18, Y+6	; 0x06
    13e6:	3f 81       	ldd	r19, Y+7	; 0x07
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	89 f1       	breq	.+98     	; 0x1450 <DIO_vidSetPinDir+0xc6>
    13ee:	8e 81       	ldd	r24, Y+6	; 0x06
    13f0:	9f 81       	ldd	r25, Y+7	; 0x07
    13f2:	83 30       	cpi	r24, 0x03	; 3
    13f4:	91 05       	cpc	r25, r1
    13f6:	09 f4       	brne	.+2      	; 0x13fa <DIO_vidSetPinDir+0x70>
    13f8:	40 c0       	rjmp	.+128    	; 0x147a <DIO_vidSetPinDir+0xf0>
    13fa:	c6 c0       	rjmp	.+396    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
				{
					case DIO_PORTA: CLR_BIT(DDRA_REG, PinId); break ;
    13fc:	aa e3       	ldi	r26, 0x3A	; 58
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ea e3       	ldi	r30, 0x3A	; 58
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_vidSetPinDir+0x90>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_vidSetPinDir+0x8c>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	b1 c0       	rjmp	.+354    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
					case DIO_PORTB: CLR_BIT(DDRB_REG, PinId); break ;
    1426:	a7 e3       	ldi	r26, 0x37	; 55
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e7 e3       	ldi	r30, 0x37	; 55
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_vidSetPinDir+0xba>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_vidSetPinDir+0xb6>
    1448:	80 95       	com	r24
    144a:	84 23       	and	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	9c c0       	rjmp	.+312    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
					case DIO_PORTC: CLR_BIT(DDRC_REG, PinId); break ;
    1450:	a4 e3       	ldi	r26, 0x34	; 52
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e4 e3       	ldi	r30, 0x34	; 52
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_vidSetPinDir+0xe4>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_vidSetPinDir+0xe0>
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	87 c0       	rjmp	.+270    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
					case DIO_PORTD: CLR_BIT(DDRD_REG, PinId); break ;
    147a:	a1 e3       	ldi	r26, 0x31	; 49
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e1 e3       	ldi	r30, 0x31	; 49
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_vidSetPinDir+0x10e>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_vidSetPinDir+0x10a>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	72 c0       	rjmp	.+228    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
				}
			}
			else if (dir == DIO_OUTPUT)
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	09 f0       	breq	.+2      	; 0x14ac <DIO_vidSetPinDir+0x122>
    14aa:	6e c0       	rjmp	.+220    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
			{
				switch(PortId)
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3d 83       	std	Y+5, r19	; 0x05
    14b4:	2c 83       	std	Y+4, r18	; 0x04
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	91 05       	cpc	r25, r1
    14be:	49 f1       	breq	.+82     	; 0x1512 <DIO_vidSetPinDir+0x188>
    14c0:	2c 81       	ldd	r18, Y+4	; 0x04
    14c2:	3d 81       	ldd	r19, Y+5	; 0x05
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <DIO_vidSetPinDir+0x14a>
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	9d 81       	ldd	r25, Y+5	; 0x05
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	61 f0       	breq	.+24     	; 0x14ea <DIO_vidSetPinDir+0x160>
    14d2:	5a c0       	rjmp	.+180    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
    14d4:	2c 81       	ldd	r18, Y+4	; 0x04
    14d6:	3d 81       	ldd	r19, Y+5	; 0x05
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	71 f1       	breq	.+92     	; 0x153a <DIO_vidSetPinDir+0x1b0>
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	9d 81       	ldd	r25, Y+5	; 0x05
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	91 05       	cpc	r25, r1
    14e6:	e9 f1       	breq	.+122    	; 0x1562 <DIO_vidSetPinDir+0x1d8>
    14e8:	4f c0       	rjmp	.+158    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
				{
				case DIO_PORTA: SET_BIT(DDRA_REG, PinId); break ;
    14ea:	aa e3       	ldi	r26, 0x3A	; 58
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ea e3       	ldi	r30, 0x3A	; 58
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_vidSetPinDir+0x17e>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_vidSetPinDir+0x17a>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	3b c0       	rjmp	.+118    	; 0x1588 <DIO_vidSetPinDir+0x1fe>
				case DIO_PORTB: SET_BIT(DDRB_REG, PinId); break ;
    1512:	a7 e3       	ldi	r26, 0x37	; 55
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e7 e3       	ldi	r30, 0x37	; 55
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_vidSetPinDir+0x1a6>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_vidSetPinDir+0x1a2>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	27 c0       	rjmp	.+78     	; 0x1588 <DIO_vidSetPinDir+0x1fe>
				case DIO_PORTC: SET_BIT(DDRC_REG, PinId); break ;
    153a:	a4 e3       	ldi	r26, 0x34	; 52
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e4 e3       	ldi	r30, 0x34	; 52
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_vidSetPinDir+0x1ce>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_vidSetPinDir+0x1ca>
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	13 c0       	rjmp	.+38     	; 0x1588 <DIO_vidSetPinDir+0x1fe>
				case DIO_PORTD: SET_BIT(DDRD_REG, PinId); break ;
    1562:	a1 e3       	ldi	r26, 0x31	; 49
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e1 e3       	ldi	r30, 0x31	; 49
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_vidSetPinDir+0x1f6>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_vidSetPinDir+0x1f2>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
		}
		else
		{
			//report error
		}
}
    1588:	27 96       	adiw	r28, 0x07	; 7
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <DIO_vidSetPortVal>:

void DIO_vidSetPortVal(u8 PortId, u8 val)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <DIO_vidSetPortVal+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <DIO_vidSetPortVal+0x8>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId <= DIO_PORTD)
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	90 f5       	brcc	.+100    	; 0x1614 <DIO_vidSetPortVal+0x7a>
	{
		switch(PortId)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3c 83       	std	Y+4, r19	; 0x04
    15b8:	2b 83       	std	Y+3, r18	; 0x03
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	d1 f0       	breq	.+52     	; 0x15f8 <DIO_vidSetPortVal+0x5e>
    15c4:	2b 81       	ldd	r18, Y+3	; 0x03
    15c6:	3c 81       	ldd	r19, Y+4	; 0x04
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <DIO_vidSetPortVal+0x3e>
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	61 f0       	breq	.+24     	; 0x15ee <DIO_vidSetPortVal+0x54>
    15d6:	1e c0       	rjmp	.+60     	; 0x1614 <DIO_vidSetPortVal+0x7a>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	81 f0       	breq	.+32     	; 0x1602 <DIO_vidSetPortVal+0x68>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	81 f0       	breq	.+32     	; 0x160c <DIO_vidSetPortVal+0x72>
    15ec:	13 c0       	rjmp	.+38     	; 0x1614 <DIO_vidSetPortVal+0x7a>
		{
			case DIO_PORTA: PORTA_REG = val; break;
    15ee:	eb e3       	ldi	r30, 0x3B	; 59
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	80 83       	st	Z, r24
    15f6:	0e c0       	rjmp	.+28     	; 0x1614 <DIO_vidSetPortVal+0x7a>
			case DIO_PORTB: PORTB_REG = val; break;
    15f8:	e8 e3       	ldi	r30, 0x38	; 56
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	80 83       	st	Z, r24
    1600:	09 c0       	rjmp	.+18     	; 0x1614 <DIO_vidSetPortVal+0x7a>
			case DIO_PORTC: PORTC_REG = val; break;
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	80 83       	st	Z, r24
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <DIO_vidSetPortVal+0x7a>
			case DIO_PORTD: PORTD_REG = val; break;
    160c:	e2 e3       	ldi	r30, 0x32	; 50
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	80 83       	st	Z, r24
	}
	else
	{
		//report error
	}
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(u8 PortId, u8 dir)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <DIO_vidSetPortDir+0x6>
    1628:	00 d0       	rcall	.+0      	; 0x162a <DIO_vidSetPortDir+0x8>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId <= DIO_PORTD)
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	90 f5       	brcc	.+100    	; 0x169c <DIO_vidSetPortDir+0x7a>
		{
			switch(PortId)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	3c 83       	std	Y+4, r19	; 0x04
    1640:	2b 83       	std	Y+3, r18	; 0x03
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	91 05       	cpc	r25, r1
    164a:	d1 f0       	breq	.+52     	; 0x1680 <DIO_vidSetPortDir+0x5e>
    164c:	2b 81       	ldd	r18, Y+3	; 0x03
    164e:	3c 81       	ldd	r19, Y+4	; 0x04
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	2c f4       	brge	.+10     	; 0x1660 <DIO_vidSetPortDir+0x3e>
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	61 f0       	breq	.+24     	; 0x1676 <DIO_vidSetPortDir+0x54>
    165e:	1e c0       	rjmp	.+60     	; 0x169c <DIO_vidSetPortDir+0x7a>
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	3c 81       	ldd	r19, Y+4	; 0x04
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	81 f0       	breq	.+32     	; 0x168a <DIO_vidSetPortDir+0x68>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	91 05       	cpc	r25, r1
    1672:	81 f0       	breq	.+32     	; 0x1694 <DIO_vidSetPortDir+0x72>
    1674:	13 c0       	rjmp	.+38     	; 0x169c <DIO_vidSetPortDir+0x7a>
			{
				case DIO_PORTA: DDRA_REG = dir; break;
    1676:	ea e3       	ldi	r30, 0x3A	; 58
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	80 83       	st	Z, r24
    167e:	0e c0       	rjmp	.+28     	; 0x169c <DIO_vidSetPortDir+0x7a>
				case DIO_PORTB: DDRB_REG = dir; break;
    1680:	e7 e3       	ldi	r30, 0x37	; 55
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	80 83       	st	Z, r24
    1688:	09 c0       	rjmp	.+18     	; 0x169c <DIO_vidSetPortDir+0x7a>
				case DIO_PORTC: DDRC_REG = dir; break;
    168a:	e4 e3       	ldi	r30, 0x34	; 52
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	80 83       	st	Z, r24
    1692:	04 c0       	rjmp	.+8      	; 0x169c <DIO_vidSetPortDir+0x7a>
				case DIO_PORTD: DDRD_REG = dir; break;
    1694:	e1 e3       	ldi	r30, 0x31	; 49
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	80 83       	st	Z, r24
		}
		else
		{
			//report error
		}
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 PortId, u8 PinId)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <DIO_u8GetPinVal+0x6>
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <DIO_u8GetPinVal+0x8>
    16b2:	0f 92       	push	r0
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	8a 83       	std	Y+2, r24	; 0x02
    16ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_val=255;
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	89 83       	std	Y+1, r24	; 0x01
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	84 30       	cpi	r24, 0x04	; 4
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <DIO_u8GetPinVal+0x1e>
    16c6:	6b c0       	rjmp	.+214    	; 0x179e <DIO_u8GetPinVal+0xf4>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	88 30       	cpi	r24, 0x08	; 8
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <DIO_u8GetPinVal+0x26>
    16ce:	67 c0       	rjmp	.+206    	; 0x179e <DIO_u8GetPinVal+0xf4>
		{
			switch(PortId)
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	3d 83       	std	Y+5, r19	; 0x05
    16d8:	2c 83       	std	Y+4, r18	; 0x04
    16da:	4c 81       	ldd	r20, Y+4	; 0x04
    16dc:	5d 81       	ldd	r21, Y+5	; 0x05
    16de:	41 30       	cpi	r20, 0x01	; 1
    16e0:	51 05       	cpc	r21, r1
    16e2:	41 f1       	breq	.+80     	; 0x1734 <DIO_u8GetPinVal+0x8a>
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	9d 81       	ldd	r25, Y+5	; 0x05
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	91 05       	cpc	r25, r1
    16ec:	34 f4       	brge	.+12     	; 0x16fa <DIO_u8GetPinVal+0x50>
    16ee:	2c 81       	ldd	r18, Y+4	; 0x04
    16f0:	3d 81       	ldd	r19, Y+5	; 0x05
    16f2:	21 15       	cp	r18, r1
    16f4:	31 05       	cpc	r19, r1
    16f6:	61 f0       	breq	.+24     	; 0x1710 <DIO_u8GetPinVal+0x66>
    16f8:	52 c0       	rjmp	.+164    	; 0x179e <DIO_u8GetPinVal+0xf4>
    16fa:	4c 81       	ldd	r20, Y+4	; 0x04
    16fc:	5d 81       	ldd	r21, Y+5	; 0x05
    16fe:	42 30       	cpi	r20, 0x02	; 2
    1700:	51 05       	cpc	r21, r1
    1702:	51 f1       	breq	.+84     	; 0x1758 <DIO_u8GetPinVal+0xae>
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	83 30       	cpi	r24, 0x03	; 3
    170a:	91 05       	cpc	r25, r1
    170c:	b9 f1       	breq	.+110    	; 0x177c <DIO_u8GetPinVal+0xd2>
    170e:	47 c0       	rjmp	.+142    	; 0x179e <DIO_u8GetPinVal+0xf4>
			{
			case DIO_PORTA:	ret_val= GET_BIT(PINA_REG,PinId); break;
    1710:	e9 e3       	ldi	r30, 0x39	; 57
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a9 01       	movw	r20, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8GetPinVal+0x7e>
    1724:	55 95       	asr	r21
    1726:	47 95       	ror	r20
    1728:	8a 95       	dec	r24
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_u8GetPinVal+0x7a>
    172c:	ca 01       	movw	r24, r20
    172e:	81 70       	andi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	35 c0       	rjmp	.+106    	; 0x179e <DIO_u8GetPinVal+0xf4>
			case DIO_PORTB: ret_val= GET_BIT(PINB_REG,PinId); break;
    1734:	e6 e3       	ldi	r30, 0x36	; 54
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a9 01       	movw	r20, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_u8GetPinVal+0xa2>
    1748:	55 95       	asr	r21
    174a:	47 95       	ror	r20
    174c:	8a 95       	dec	r24
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_u8GetPinVal+0x9e>
    1750:	ca 01       	movw	r24, r20
    1752:	81 70       	andi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	23 c0       	rjmp	.+70     	; 0x179e <DIO_u8GetPinVal+0xf4>
			case DIO_PORTC: ret_val= GET_BIT(PINC_REG,PinId); break;
    1758:	e3 e3       	ldi	r30, 0x33	; 51
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a9 01       	movw	r20, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_u8GetPinVal+0xc6>
    176c:	55 95       	asr	r21
    176e:	47 95       	ror	r20
    1770:	8a 95       	dec	r24
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_u8GetPinVal+0xc2>
    1774:	ca 01       	movw	r24, r20
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	11 c0       	rjmp	.+34     	; 0x179e <DIO_u8GetPinVal+0xf4>
			case DIO_PORTD: ret_val= GET_BIT(PIND_REG,PinId); break;
    177c:	e0 e3       	ldi	r30, 0x30	; 48
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a9 01       	movw	r20, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_u8GetPinVal+0xea>
    1790:	55 95       	asr	r21
    1792:	47 95       	ror	r20
    1794:	8a 95       	dec	r24
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_u8GetPinVal+0xe6>
    1798:	ca 01       	movw	r24, r20
    179a:	81 70       	andi	r24, 0x01	; 1
    179c:	89 83       	std	Y+1, r24	; 0x01
		}
	else
	{
		//Report error
	}
	return ret_val;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <KPD_u8GetPressedKey>:
		{'7', '8', '9', '*'},
		{'/', '0', 'B', '='}
};

u8 KPD_u8GetPressedKey (void)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	62 97       	sbiw	r28, 0x12	; 18
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61

	u8 u8SwitchVal=NOT_PRESSED ;
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	89 8b       	std	Y+17, r24	; 0x11
	u8 u8Column;
	u8 u8Row;

	for(u8Column=0 ; u8Column<4 ; u8Column++)
    17c8:	18 8a       	std	Y+16, r1	; 0x10
    17ca:	aa c0       	rjmp	.+340    	; 0x1920 <KPD_u8GetPressedKey+0x170>
	{
		DIO_vidSetPinVal(COLUMN_PORT,u8Column,DIO_LOW);
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	68 89       	ldd	r22, Y+16	; 0x10
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>

		for(u8Row=0 ; u8Row<4 ; u8Row++)
    17d6:	1f 86       	std	Y+15, r1	; 0x0f
    17d8:	97 c0       	rjmp	.+302    	; 0x1908 <KPD_u8GetPressedKey+0x158>
		{

			if ((DIO_u8GetPinVal(ROW_PORT,u8Row))==DIO_LOW)
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	6f 85       	ldd	r22, Y+15	; 0x0f
    17de:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_u8GetPinVal>
    17e2:	88 23       	and	r24, r24
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <KPD_u8GetPressedKey+0x38>
    17e6:	8d c0       	rjmp	.+282    	; 0x1902 <KPD_u8GetPressedKey+0x152>
			{
				u8SwitchVal = KPD_au8Array[(u8Row)][u8Column] ;
    17e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ea:	48 2f       	mov	r20, r24
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	88 89       	ldd	r24, Y+16	; 0x10
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	ca 01       	movw	r24, r20
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	82 0f       	add	r24, r18
    1800:	93 1f       	adc	r25, r19
    1802:	fc 01       	movw	r30, r24
    1804:	eb 57       	subi	r30, 0x7B	; 123
    1806:	fe 4f       	sbci	r31, 0xFE	; 254
    1808:	80 81       	ld	r24, Z
    180a:	89 8b       	std	Y+17, r24	; 0x11
				while (DIO_u8GetPinVal(ROW_PORT,u8Row)==DIO_LOW);
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1810:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_u8GetPinVal>
    1814:	88 23       	and	r24, r24
    1816:	d1 f3       	breq	.-12     	; 0x180c <KPD_u8GetPressedKey+0x5c>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e2       	ldi	r26, 0x20	; 32
    181e:	b1 e4       	ldi	r27, 0x41	; 65
    1820:	8b 87       	std	Y+11, r24	; 0x0b
    1822:	9c 87       	std	Y+12, r25	; 0x0c
    1824:	ad 87       	std	Y+13, r26	; 0x0d
    1826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a ef       	ldi	r20, 0xFA	; 250
    1836:	54 e4       	ldi	r21, 0x44	; 68
    1838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8f 83       	std	Y+7, r24	; 0x07
    1842:	98 87       	std	Y+8, r25	; 0x08
    1844:	a9 87       	std	Y+9, r26	; 0x09
    1846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <KPD_u8GetPressedKey+0xba>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <KPD_u8GetPressedKey+0x138>
	else if (__tmp > 65535)
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <KPD_u8GetPressedKey+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	6b 85       	ldd	r22, Y+11	; 0x0b
    1884:	7c 85       	ldd	r23, Y+12	; 0x0c
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <KPD_u8GetPressedKey+0x11a>
    18ac:	88 ec       	ldi	r24, 0xC8	; 200
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <KPD_u8GetPressedKey+0x108>
    18bc:	9c 83       	std	Y+4, r25	; 0x04
    18be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <KPD_u8GetPressedKey+0xfc>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <KPD_u8GetPressedKey+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <KPD_u8GetPressedKey+0x144>
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(10);
				return u8SwitchVal;
    18fc:	89 89       	ldd	r24, Y+17	; 0x11
    18fe:	8a 8b       	std	Y+18, r24	; 0x12
    1900:	15 c0       	rjmp	.+42     	; 0x192c <KPD_u8GetPressedKey+0x17c>

	for(u8Column=0 ; u8Column<4 ; u8Column++)
	{
		DIO_vidSetPinVal(COLUMN_PORT,u8Column,DIO_LOW);

		for(u8Row=0 ; u8Row<4 ; u8Row++)
    1902:	8f 85       	ldd	r24, Y+15	; 0x0f
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	8f 87       	std	Y+15, r24	; 0x0f
    1908:	8f 85       	ldd	r24, Y+15	; 0x0f
    190a:	84 30       	cpi	r24, 0x04	; 4
    190c:	08 f4       	brcc	.+2      	; 0x1910 <KPD_u8GetPressedKey+0x160>
    190e:	65 cf       	rjmp	.-310    	; 0x17da <KPD_u8GetPressedKey+0x2a>
				return u8SwitchVal;
			}

		}

		DIO_vidSetPinVal(COLUMN_PORT,u8Column,DIO_HIGH);
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	68 89       	ldd	r22, Y+16	; 0x10
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>

	u8 u8SwitchVal=NOT_PRESSED ;
	u8 u8Column;
	u8 u8Row;

	for(u8Column=0 ; u8Column<4 ; u8Column++)
    191a:	88 89       	ldd	r24, Y+16	; 0x10
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	88 8b       	std	Y+16, r24	; 0x10
    1920:	88 89       	ldd	r24, Y+16	; 0x10
    1922:	84 30       	cpi	r24, 0x04	; 4
    1924:	08 f4       	brcc	.+2      	; 0x1928 <KPD_u8GetPressedKey+0x178>
    1926:	52 cf       	rjmp	.-348    	; 0x17cc <KPD_u8GetPressedKey+0x1c>

		}

		DIO_vidSetPinVal(COLUMN_PORT,u8Column,DIO_HIGH);
	}
	return u8SwitchVal;
    1928:	89 89       	ldd	r24, Y+17	; 0x11
    192a:	8a 8b       	std	Y+18, r24	; 0x12
    192c:	8a 89       	ldd	r24, Y+18	; 0x12

}
    192e:	62 96       	adiw	r28, 0x12	; 18
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <HLCD_voidInit>:
#include "LCD_Priv.h"
#include "LCD_Config.h"
#include <avr/delay.h>

void HLCD_voidInit(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	e8 97       	sbiw	r28, 0x38	; 56
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a8 ec       	ldi	r26, 0xC8	; 200
    195a:	b2 e4       	ldi	r27, 0x42	; 66
    195c:	8d ab       	std	Y+53, r24	; 0x35
    195e:	9e ab       	std	Y+54, r25	; 0x36
    1960:	af ab       	std	Y+55, r26	; 0x37
    1962:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1964:	6d a9       	ldd	r22, Y+53	; 0x35
    1966:	7e a9       	ldd	r23, Y+54	; 0x36
    1968:	8f a9       	ldd	r24, Y+55	; 0x37
    196a:	98 ad       	ldd	r25, Y+56	; 0x38
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4a ef       	ldi	r20, 0xFA	; 250
    1972:	54 e4       	ldi	r21, 0x44	; 68
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	89 ab       	std	Y+49, r24	; 0x31
    197e:	9a ab       	std	Y+50, r25	; 0x32
    1980:	ab ab       	std	Y+51, r26	; 0x33
    1982:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1984:	69 a9       	ldd	r22, Y+49	; 0x31
    1986:	7a a9       	ldd	r23, Y+50	; 0x32
    1988:	8b a9       	ldd	r24, Y+51	; 0x33
    198a:	9c a9       	ldd	r25, Y+52	; 0x34
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e8       	ldi	r20, 0x80	; 128
    1992:	5f e3       	ldi	r21, 0x3F	; 63
    1994:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1998:	88 23       	and	r24, r24
    199a:	2c f4       	brge	.+10     	; 0x19a6 <HLCD_voidInit+0x66>
		__ticks = 1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	98 ab       	std	Y+48, r25	; 0x30
    19a2:	8f a7       	std	Y+47, r24	; 0x2f
    19a4:	3f c0       	rjmp	.+126    	; 0x1a24 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    19a6:	69 a9       	ldd	r22, Y+49	; 0x31
    19a8:	7a a9       	ldd	r23, Y+50	; 0x32
    19aa:	8b a9       	ldd	r24, Y+51	; 0x33
    19ac:	9c a9       	ldd	r25, Y+52	; 0x34
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	3f ef       	ldi	r19, 0xFF	; 255
    19b2:	4f e7       	ldi	r20, 0x7F	; 127
    19b4:	57 e4       	ldi	r21, 0x47	; 71
    19b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ba:	18 16       	cp	r1, r24
    19bc:	4c f5       	brge	.+82     	; 0x1a10 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19be:	6d a9       	ldd	r22, Y+53	; 0x35
    19c0:	7e a9       	ldd	r23, Y+54	; 0x36
    19c2:	8f a9       	ldd	r24, Y+55	; 0x37
    19c4:	98 ad       	ldd	r25, Y+56	; 0x38
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e2       	ldi	r20, 0x20	; 32
    19cc:	51 e4       	ldi	r21, 0x41	; 65
    19ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	98 ab       	std	Y+48, r25	; 0x30
    19e4:	8f a7       	std	Y+47, r24	; 0x2f
    19e6:	0f c0       	rjmp	.+30     	; 0x1a06 <HLCD_voidInit+0xc6>
    19e8:	88 ec       	ldi	r24, 0xC8	; 200
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9e a7       	std	Y+46, r25	; 0x2e
    19ee:	8d a7       	std	Y+45, r24	; 0x2d
    19f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    19f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <HLCD_voidInit+0xb4>
    19f8:	9e a7       	std	Y+46, r25	; 0x2e
    19fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	98 ab       	std	Y+48, r25	; 0x30
    1a04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a08:	98 a9       	ldd	r25, Y+48	; 0x30
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	69 f7       	brne	.-38     	; 0x19e8 <HLCD_voidInit+0xa8>
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a10:	69 a9       	ldd	r22, Y+49	; 0x31
    1a12:	7a a9       	ldd	r23, Y+50	; 0x32
    1a14:	8b a9       	ldd	r24, Y+51	; 0x33
    1a16:	9c a9       	ldd	r25, Y+52	; 0x34
    1a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	98 ab       	std	Y+48, r25	; 0x30
    1a22:	8f a7       	std	Y+47, r24	; 0x2f
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	9c a7       	std	Y+44, r25	; 0x2c
    1a2a:	8b a7       	std	Y+43, r24	; 0x2b
    1a2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <HLCD_voidInit+0xf0>
    1a34:	9c a7       	std	Y+44, r25	; 0x2c
    1a36:	8b a7       	std	Y+43, r24	; 0x2b



	_delay_ms(100);
	HLCD_voidSendCommand(FUNCTION_SET_8BIT);
    1a38:	88 e3       	ldi	r24, 0x38	; 56
    1a3a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <HLCD_voidSendCommand>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a0 e0       	ldi	r26, 0x00	; 0
    1a44:	b0 e4       	ldi	r27, 0x40	; 64
    1a46:	8f a3       	std	Y+39, r24	; 0x27
    1a48:	98 a7       	std	Y+40, r25	; 0x28
    1a4a:	a9 a7       	std	Y+41, r26	; 0x29
    1a4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a50:	78 a5       	ldd	r23, Y+40	; 0x28
    1a52:	89 a5       	ldd	r24, Y+41	; 0x29
    1a54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	4a ef       	ldi	r20, 0xFA	; 250
    1a5c:	54 e4       	ldi	r21, 0x44	; 68
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	8b a3       	std	Y+35, r24	; 0x23
    1a68:	9c a3       	std	Y+36, r25	; 0x24
    1a6a:	ad a3       	std	Y+37, r26	; 0x25
    1a6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a70:	7c a1       	ldd	r23, Y+36	; 0x24
    1a72:	8d a1       	ldd	r24, Y+37	; 0x25
    1a74:	9e a1       	ldd	r25, Y+38	; 0x26
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e8       	ldi	r20, 0x80	; 128
    1a7c:	5f e3       	ldi	r21, 0x3F	; 63
    1a7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a82:	88 23       	and	r24, r24
    1a84:	2c f4       	brge	.+10     	; 0x1a90 <HLCD_voidInit+0x150>
		__ticks = 1;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9a a3       	std	Y+34, r25	; 0x22
    1a8c:	89 a3       	std	Y+33, r24	; 0x21
    1a8e:	3f c0       	rjmp	.+126    	; 0x1b0e <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    1a90:	6b a1       	ldd	r22, Y+35	; 0x23
    1a92:	7c a1       	ldd	r23, Y+36	; 0x24
    1a94:	8d a1       	ldd	r24, Y+37	; 0x25
    1a96:	9e a1       	ldd	r25, Y+38	; 0x26
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	57 e4       	ldi	r21, 0x47	; 71
    1aa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	4c f5       	brge	.+82     	; 0x1afa <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aaa:	78 a5       	ldd	r23, Y+40	; 0x28
    1aac:	89 a5       	ldd	r24, Y+41	; 0x29
    1aae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e2       	ldi	r20, 0x20	; 32
    1ab6:	51 e4       	ldi	r21, 0x41	; 65
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	9a a3       	std	Y+34, r25	; 0x22
    1ace:	89 a3       	std	Y+33, r24	; 0x21
    1ad0:	0f c0       	rjmp	.+30     	; 0x1af0 <HLCD_voidInit+0x1b0>
    1ad2:	88 ec       	ldi	r24, 0xC8	; 200
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	98 a3       	std	Y+32, r25	; 0x20
    1ad8:	8f 8f       	std	Y+31, r24	; 0x1f
    1ada:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1adc:	98 a1       	ldd	r25, Y+32	; 0x20
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <HLCD_voidInit+0x19e>
    1ae2:	98 a3       	std	Y+32, r25	; 0x20
    1ae4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	9a a3       	std	Y+34, r25	; 0x22
    1aee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af0:	89 a1       	ldd	r24, Y+33	; 0x21
    1af2:	9a a1       	ldd	r25, Y+34	; 0x22
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	69 f7       	brne	.-38     	; 0x1ad2 <HLCD_voidInit+0x192>
    1af8:	14 c0       	rjmp	.+40     	; 0x1b22 <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afa:	6b a1       	ldd	r22, Y+35	; 0x23
    1afc:	7c a1       	ldd	r23, Y+36	; 0x24
    1afe:	8d a1       	ldd	r24, Y+37	; 0x25
    1b00:	9e a1       	ldd	r25, Y+38	; 0x26
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	9a a3       	std	Y+34, r25	; 0x22
    1b0c:	89 a3       	std	Y+33, r24	; 0x21
    1b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b10:	9a a1       	ldd	r25, Y+34	; 0x22
    1b12:	9e 8f       	std	Y+30, r25	; 0x1e
    1b14:	8d 8f       	std	Y+29, r24	; 0x1d
    1b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <HLCD_voidInit+0x1da>
    1b1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b20:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HLCD_voidSendCommand(LCD_DISPLAY);
    1b22:	8c e0       	ldi	r24, 0x0C	; 12
    1b24:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <HLCD_voidSendCommand>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b0 e4       	ldi	r27, 0x40	; 64
    1b30:	89 8f       	std	Y+25, r24	; 0x19
    1b32:	9a 8f       	std	Y+26, r25	; 0x1a
    1b34:	ab 8f       	std	Y+27, r26	; 0x1b
    1b36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a ef       	ldi	r20, 0xFA	; 250
    1b46:	54 e4       	ldi	r21, 0x44	; 68
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	8d 8b       	std	Y+21, r24	; 0x15
    1b52:	9e 8b       	std	Y+22, r25	; 0x16
    1b54:	af 8b       	std	Y+23, r26	; 0x17
    1b56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b58:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <HLCD_voidInit+0x23a>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	8b 8b       	std	Y+19, r24	; 0x13
    1b78:	3f c0       	rjmp	.+126    	; 0x1bf8 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1b7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b80:	98 8d       	ldd	r25, Y+24	; 0x18
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	4c f5       	brge	.+82     	; 0x1be4 <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	69 8d       	ldd	r22, Y+25	; 0x19
    1b94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9c 8b       	std	Y+20, r25	; 0x14
    1bb8:	8b 8b       	std	Y+19, r24	; 0x13
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <HLCD_voidInit+0x29a>
    1bbc:	88 ec       	ldi	r24, 0xC8	; 200
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9a 8b       	std	Y+18, r25	; 0x12
    1bc2:	89 8b       	std	Y+17, r24	; 0x11
    1bc4:	89 89       	ldd	r24, Y+17	; 0x11
    1bc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <HLCD_voidInit+0x288>
    1bcc:	9a 8b       	std	Y+18, r25	; 0x12
    1bce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bda:	8b 89       	ldd	r24, Y+19	; 0x13
    1bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <HLCD_voidInit+0x27c>
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be4:	6d 89       	ldd	r22, Y+21	; 0x15
    1be6:	7e 89       	ldd	r23, Y+22	; 0x16
    1be8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bea:	98 8d       	ldd	r25, Y+24	; 0x18
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9c 8b       	std	Y+20, r25	; 0x14
    1bf6:	8b 8b       	std	Y+19, r24	; 0x13
    1bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfc:	98 8b       	std	Y+16, r25	; 0x10
    1bfe:	8f 87       	std	Y+15, r24	; 0x0f
    1c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c02:	98 89       	ldd	r25, Y+16	; 0x10
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <HLCD_voidInit+0x2c4>
    1c08:	98 8b       	std	Y+16, r25	; 0x10
    1c0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HLCD_voidSendCommand(LCD_CLEAR);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <HLCD_voidSendCommand>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 e0       	ldi	r26, 0x00	; 0
    1c18:	b0 e4       	ldi	r27, 0x40	; 64
    1c1a:	8b 87       	std	Y+11, r24	; 0x0b
    1c1c:	9c 87       	std	Y+12, r25	; 0x0c
    1c1e:	ad 87       	std	Y+13, r26	; 0x0d
    1c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a ef       	ldi	r20, 0xFA	; 250
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8f 83       	std	Y+7, r24	; 0x07
    1c3c:	98 87       	std	Y+8, r25	; 0x08
    1c3e:	a9 87       	std	Y+9, r26	; 0x09
    1c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <HLCD_voidInit+0x324>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	4c f5       	brge	.+82     	; 0x1cce <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e2       	ldi	r20, 0x20	; 32
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <HLCD_voidInit+0x384>
    1ca6:	88 ec       	ldi	r24, 0xC8	; 200
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <HLCD_voidInit+0x372>
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <HLCD_voidInit+0x366>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <HLCD_voidInit+0x3ae>
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidSendCommand(LCD_ENTRYMODE);
    1cf6:	86 e0       	ldi	r24, 0x06	; 6
    1cf8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <HLCD_voidSendCommand>

}
    1cfc:	e8 96       	adiw	r28, 0x38	; 56
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <HLCD_voidSendCommand>:
void HLCD_voidSendCommand(u8 Copy_u8Cmd)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	2f 97       	sbiw	r28, 0x0f	; 15
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	8f 87       	std	Y+15, r24	; 0x0f
	//RS LOW
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	65 e0       	ldi	r22, 0x05	; 5
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
	//Command
	DIO_vidSetPortVal(LCD_DATA_PORT,Copy_u8Cmd);
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d32:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_vidSetPortVal>
	//Enable
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	62 e0       	ldi	r22, 0x02	; 2
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e8       	ldi	r26, 0x80	; 128
    1d46:	bf e3       	ldi	r27, 0x3F	; 63
    1d48:	8b 87       	std	Y+11, r24	; 0x0b
    1d4a:	9c 87       	std	Y+12, r25	; 0x0c
    1d4c:	ad 87       	std	Y+13, r26	; 0x0d
    1d4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a ef       	ldi	r20, 0xFA	; 250
    1d5e:	54 e4       	ldi	r21, 0x44	; 68
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	8f 83       	std	Y+7, r24	; 0x07
    1d6a:	98 87       	std	Y+8, r25	; 0x08
    1d6c:	a9 87       	std	Y+9, r26	; 0x09
    1d6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d70:	6f 81       	ldd	r22, Y+7	; 0x07
    1d72:	78 85       	ldd	r23, Y+8	; 0x08
    1d74:	89 85       	ldd	r24, Y+9	; 0x09
    1d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <HLCD_voidSendCommand+0x84>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	3f c0       	rjmp	.+126    	; 0x1e10 <HLCD_voidSendCommand+0x102>
	else if (__tmp > 65535)
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	4c f5       	brge	.+82     	; 0x1dfc <HLCD_voidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <HLCD_voidSendCommand+0xe4>
    1dd4:	88 ec       	ldi	r24, 0xC8	; 200
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9c 83       	std	Y+4, r25	; 0x04
    1dda:	8b 83       	std	Y+3, r24	; 0x03
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <HLCD_voidSendCommand+0xd2>
    1de4:	9c 83       	std	Y+4, r25	; 0x04
    1de6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	9e 81       	ldd	r25, Y+6	; 0x06
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f7       	brne	.-38     	; 0x1dd4 <HLCD_voidSendCommand+0xc6>
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <HLCD_voidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <HLCD_voidSendCommand+0x10e>
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	62 e0       	ldi	r22, 0x02	; 2
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>

}
    1e2e:	2f 96       	adiw	r28, 0x0f	; 15
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <HLCD_voidSendChar>:
void HLCD_voidSendChar(u8 Copy_u8Char)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	2f 97       	sbiw	r28, 0x0f	; 15
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	8f 87       	std	Y+15, r24	; 0x0f
	//RS LOW
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	65 e0       	ldi	r22, 0x05	; 5
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
	//Command
	DIO_vidSetPortVal(LCD_DATA_PORT,Copy_u8Char);
    1e60:	83 e0       	ldi	r24, 0x03	; 3
    1e62:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e64:	0e 94 cd 0a 	call	0x159a	; 0x159a <DIO_vidSetPortVal>
	//Enable
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	62 e0       	ldi	r22, 0x02	; 2
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a0 e8       	ldi	r26, 0x80	; 128
    1e78:	bf e3       	ldi	r27, 0x3F	; 63
    1e7a:	8b 87       	std	Y+11, r24	; 0x0b
    1e7c:	9c 87       	std	Y+12, r25	; 0x0c
    1e7e:	ad 87       	std	Y+13, r26	; 0x0d
    1e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a ef       	ldi	r20, 0xFA	; 250
    1e90:	54 e4       	ldi	r21, 0x44	; 68
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8f 83       	std	Y+7, r24	; 0x07
    1e9c:	98 87       	std	Y+8, r25	; 0x08
    1e9e:	a9 87       	std	Y+9, r26	; 0x09
    1ea0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <HLCD_voidSendChar+0x84>
		__ticks = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
    1ec2:	3f c0       	rjmp	.+126    	; 0x1f42 <HLCD_voidSendChar+0x102>
	else if (__tmp > 65535)
    1ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec6:	78 85       	ldd	r23, Y+8	; 0x08
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed8:	18 16       	cp	r1, r24
    1eda:	4c f5       	brge	.+82     	; 0x1f2e <HLCD_voidSendChar+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <HLCD_voidSendChar+0xe4>
    1f06:	88 ec       	ldi	r24, 0xC8	; 200
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <HLCD_voidSendChar+0xd2>
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	69 f7       	brne	.-38     	; 0x1f06 <HLCD_voidSendChar+0xc6>
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <HLCD_voidSendChar+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f30:	78 85       	ldd	r23, Y+8	; 0x08
    1f32:	89 85       	ldd	r24, Y+9	; 0x09
    1f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	9a 83       	std	Y+2, r25	; 0x02
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <HLCD_voidSendChar+0x10e>
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_vidSetPinVal(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	62 e0       	ldi	r22, 0x02	; 2
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
}
    1f60:	2f 96       	adiw	r28, 0x0f	; 15
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <HLCD_voidGotoxy>:

void HLCD_voidGotoxy(u8 X,u8 Y)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <HLCD_voidGotoxy+0x6>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	6a 83       	std	Y+2, r22	; 0x02
	if(Y==0)
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	88 23       	and	r24, r24
    1f84:	29 f4       	brne	.+10     	; 0x1f90 <HLCD_voidGotoxy+0x1e>
	{
	HLCD_voidSendCommand(LCD_SETCURSER|X) ;
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	80 68       	ori	r24, 0x80	; 128
    1f8a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <HLCD_voidSendCommand>
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <HLCD_voidGotoxy+0x26>
	}
	else
	{
		HLCD_voidSendCommand((LCD_SETCURSER|X) | (0x40)) ;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	80 6c       	ori	r24, 0xC0	; 192
    1f94:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <HLCD_voidSendCommand>
	}

}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *Copy_u8ptrString)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <HLCD_voidSendString+0x6>
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	0a c0       	rjmp	.+20     	; 0x1fc6 <HLCD_voidSendString+0x24>

	while(*Copy_u8ptrString!='\0')
	{
		HLCD_voidSendChar(*Copy_u8ptrString);
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	80 81       	ld	r24, Z
    1fb8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <HLCD_voidSendChar>
		Copy_u8ptrString++;
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD_voidSendString(u8 *Copy_u8ptrString)
{

	while(*Copy_u8ptrString!='\0')
    1fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 23       	and	r24, r24
    1fce:	89 f7       	brne	.-30     	; 0x1fb2 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendChar(*Copy_u8ptrString);
		Copy_u8ptrString++;

	}
}
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <LCD_Send_Num>:

void LCD_Send_Num(int num)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	68 97       	sbiw	r28, 0x18	; 24
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	98 8f       	std	Y+24, r25	; 0x18
    1ff0:	8f 8b       	std	Y+23, r24	; 0x17
	int txt[10] = {0};					// Array holds the number in digits
    1ff2:	84 e1       	ldi	r24, 0x14	; 20
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	33 96       	adiw	r30, 0x03	; 3
    1ff8:	df 01       	movw	r26, r30
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	1d 92       	st	X+, r1
    1ffe:	9a 95       	dec	r25
    2000:	e9 f7       	brne	.-6      	; 0x1ffc <LCD_Send_Num+0x22>
	int i = 0;						// Iterator
    2002:	1a 82       	std	Y+2, r1	; 0x02
    2004:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    2006:	8f 89       	ldd	r24, Y+23	; 0x17
    2008:	98 8d       	ldd	r25, Y+24	; 0x18
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	21 f4       	brne	.+8      	; 0x2016 <LCD_Send_Num+0x3c>
	{
		HLCD_voidSendChar('0');
    200e:	80 e3       	ldi	r24, 0x30	; 48
    2010:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <HLCD_voidSendChar>
    2014:	4b c0       	rjmp	.+150    	; 0x20ac <LCD_Send_Num+0xd2>
		return;
	}
	for(i = 0; num != 0; i++)
    2016:	1a 82       	std	Y+2, r1	; 0x02
    2018:	19 82       	std	Y+1, r1	; 0x01
    201a:	26 c0       	rjmp	.+76     	; 0x2068 <LCD_Send_Num+0x8e>
	{
		txt[i] = num%10 +48;				// Get the ASCII code of the rightmost digit
    201c:	e9 81       	ldd	r30, Y+1	; 0x01
    201e:	fa 81       	ldd	r31, Y+2	; 0x02
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	2a e0       	ldi	r18, 0x0A	; 10
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	b9 01       	movw	r22, r18
    202a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__divmodhi4>
    202e:	ac 01       	movw	r20, r24
    2030:	40 5d       	subi	r20, 0xD0	; 208
    2032:	5f 4f       	sbci	r21, 0xFF	; 255
    2034:	9f 01       	movw	r18, r30
    2036:	22 0f       	add	r18, r18
    2038:	33 1f       	adc	r19, r19
    203a:	ce 01       	movw	r24, r28
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	82 0f       	add	r24, r18
    2040:	93 1f       	adc	r25, r19
    2042:	fc 01       	movw	r30, r24
    2044:	32 96       	adiw	r30, 0x02	; 2
    2046:	51 83       	std	Z+1, r21	; 0x01
    2048:	40 83       	st	Z, r20
		num = num/ 10;					// Remove the rightmost digit
    204a:	8f 89       	ldd	r24, Y+23	; 0x17
    204c:	98 8d       	ldd	r25, Y+24	; 0x18
    204e:	2a e0       	ldi	r18, 0x0A	; 10
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	b9 01       	movw	r22, r18
    2054:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__divmodhi4>
    2058:	cb 01       	movw	r24, r22
    205a:	98 8f       	std	Y+24, r25	; 0x18
    205c:	8f 8b       	std	Y+23, r24	; 0x17
	if(num == 0)
	{
		HLCD_voidSendChar('0');
		return;
	}
	for(i = 0; num != 0; i++)
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	01 96       	adiw	r24, 0x01	; 1
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	b1 f6       	brne	.-84     	; 0x201c <LCD_Send_Num+0x42>
	{
		txt[i] = num%10 +48;				// Get the ASCII code of the rightmost digit
		num = num/ 10;					// Remove the rightmost digit
	}
	i--;
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_Send_Num+0xca>
	while(i >= 0 )
	{
		HLCD_voidSendChar(txt[i]);				// Display the digits in reverse order
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	9c 01       	movw	r18, r24
    2082:	22 0f       	add	r18, r18
    2084:	33 1f       	adc	r19, r19
    2086:	ce 01       	movw	r24, r28
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	82 0f       	add	r24, r18
    208c:	93 1f       	adc	r25, r19
    208e:	fc 01       	movw	r30, r24
    2090:	32 96       	adiw	r30, 0x02	; 2
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <HLCD_voidSendChar>
		i--;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
	{
		txt[i] = num%10 +48;				// Get the ASCII code of the rightmost digit
		num = num/ 10;					// Remove the rightmost digit
	}
	i--;
	while(i >= 0 )
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	99 23       	and	r25, r25
    20aa:	44 f7       	brge	.-48     	; 0x207c <LCD_Send_Num+0xa2>
	{
		HLCD_voidSendChar(txt[i]);				// Display the digits in reverse order
		i--;
	}
}
    20ac:	68 96       	adiw	r28, 0x18	; 24
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <LCD_Send_Float>:
void LCD_Send_Float(float num)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	2f 97       	sbiw	r28, 0x0f	; 15
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	6c 87       	std	Y+12, r22	; 0x0c
    20d4:	7d 87       	std	Y+13, r23	; 0x0d
    20d6:	8e 87       	std	Y+14, r24	; 0x0e
    20d8:	9f 87       	std	Y+15, r25	; 0x0f
	f32 num2ndPart;
	s32 num1stPart = (u32) num;
    20da:	6c 85       	ldd	r22, Y+12	; 0x0c
    20dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    20de:	8e 85       	ldd	r24, Y+14	; 0x0e
    20e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	8c 83       	std	Y+4, r24	; 0x04
    20ec:	9d 83       	std	Y+5, r25	; 0x05
    20ee:	ae 83       	std	Y+6, r26	; 0x06
    20f0:	bf 83       	std	Y+7, r27	; 0x07
	LCD_Send_Num(num1stPart);
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	9d 81       	ldd	r25, Y+5	; 0x05
    20f6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_Send_Num>

	num2ndPart = (f32) num-num1stPart;
    20fa:	6c 81       	ldd	r22, Y+4	; 0x04
    20fc:	7d 81       	ldd	r23, Y+5	; 0x05
    20fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2100:	9f 81       	ldd	r25, Y+7	; 0x07
    2102:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2106:	9b 01       	movw	r18, r22
    2108:	ac 01       	movw	r20, r24
    210a:	6c 85       	ldd	r22, Y+12	; 0x0c
    210c:	7d 85       	ldd	r23, Y+13	; 0x0d
    210e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2110:	9f 85       	ldd	r25, Y+15	; 0x0f
    2112:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	88 87       	std	Y+8, r24	; 0x08
    211c:	99 87       	std	Y+9, r25	; 0x09
    211e:	aa 87       	std	Y+10, r26	; 0x0a
    2120:	bb 87       	std	Y+11, r27	; 0x0b
	if (num < 0) {
    2122:	6c 85       	ldd	r22, Y+12	; 0x0c
    2124:	7d 85       	ldd	r23, Y+13	; 0x0d
    2126:	8e 85       	ldd	r24, Y+14	; 0x0e
    2128:	9f 85       	ldd	r25, Y+15	; 0x0f
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	4c f4       	brge	.+18     	; 0x214c <LCD_Send_Float+0x8e>
		num2ndPart = (f32) (-1) * (num2ndPart);
    213a:	88 85       	ldd	r24, Y+8	; 0x08
    213c:	99 85       	ldd	r25, Y+9	; 0x09
    213e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2140:	bb 85       	ldd	r27, Y+11	; 0x0b
    2142:	b0 58       	subi	r27, 0x80	; 128
    2144:	88 87       	std	Y+8, r24	; 0x08
    2146:	99 87       	std	Y+9, r25	; 0x09
    2148:	aa 87       	std	Y+10, r26	; 0x0a
    214a:	bb 87       	std	Y+11, r27	; 0x0b
	}
	if(((f32)num-num1stPart)>0)
    214c:	6c 81       	ldd	r22, Y+4	; 0x04
    214e:	7d 81       	ldd	r23, Y+5	; 0x05
    2150:	8e 81       	ldd	r24, Y+6	; 0x06
    2152:	9f 81       	ldd	r25, Y+7	; 0x07
    2154:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2158:	9b 01       	movw	r18, r22
    215a:	ac 01       	movw	r20, r24
    215c:	6c 85       	ldd	r22, Y+12	; 0x0c
    215e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2160:	8e 85       	ldd	r24, Y+14	; 0x0e
    2162:	9f 85       	ldd	r25, Y+15	; 0x0f
    2164:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    217c:	18 16       	cp	r1, r24
    217e:	0c f0       	brlt	.+2      	; 0x2182 <LCD_Send_Float+0xc4>
    2180:	68 c0       	rjmp	.+208    	; 0x2252 <LCD_Send_Float+0x194>
	{
		HLCD_voidSendChar('.');
    2182:	8e e2       	ldi	r24, 0x2E	; 46
    2184:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <HLCD_voidSendChar>
			u8 zero_flag=0,temp;
    2188:	1b 82       	std	Y+3, r1	; 0x03
			for (u8 i = 1; i <= 4; i++) {
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	5d c0       	rjmp	.+186    	; 0x224a <LCD_Send_Float+0x18c>
				num2ndPart = num2ndPart * 10;
    2190:	68 85       	ldd	r22, Y+8	; 0x08
    2192:	79 85       	ldd	r23, Y+9	; 0x09
    2194:	8a 85       	ldd	r24, Y+10	; 0x0a
    2196:	9b 85       	ldd	r25, Y+11	; 0x0b
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	88 87       	std	Y+8, r24	; 0x08
    21aa:	99 87       	std	Y+9, r25	; 0x09
    21ac:	aa 87       	std	Y+10, r26	; 0x0a
    21ae:	bb 87       	std	Y+11, r27	; 0x0b
				 temp = (u8) num2ndPart;
    21b0:	68 85       	ldd	r22, Y+8	; 0x08
    21b2:	79 85       	ldd	r23, Y+9	; 0x09
    21b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8a 83       	std	Y+2, r24	; 0x02
				if((temp==0)&&zero_flag&&i<=3)
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	88 23       	and	r24, r24
    21c6:	51 f4       	brne	.+20     	; 0x21dc <LCD_Send_Float+0x11e>
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	88 23       	and	r24, r24
    21cc:	39 f0       	breq	.+14     	; 0x21dc <LCD_Send_Float+0x11e>
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	84 30       	cpi	r24, 0x04	; 4
    21d2:	20 f4       	brcc	.+8      	; 0x21dc <LCD_Send_Float+0x11e>
				{
					HLCD_voidSendChar('0');
    21d4:	80 e3       	ldi	r24, 0x30	; 48
    21d6:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <HLCD_voidSendChar>
    21da:	3b c0       	rjmp	.+118    	; 0x2252 <LCD_Send_Float+0x194>
					break;
				}
				else if(zero_flag&&(temp>0))
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	88 23       	and	r24, r24
    21e0:	71 f0       	breq	.+28     	; 0x21fe <LCD_Send_Float+0x140>
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	88 23       	and	r24, r24
    21e6:	59 f0       	breq	.+22     	; 0x21fe <LCD_Send_Float+0x140>
				{
					if(temp>=4)
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	84 30       	cpi	r24, 0x04	; 4
    21ec:	20 f0       	brcs	.+8      	; 0x21f6 <LCD_Send_Float+0x138>
						HLCD_voidSendChar('1');
    21ee:	81 e3       	ldi	r24, 0x31	; 49
    21f0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <HLCD_voidSendChar>
    21f4:	2e c0       	rjmp	.+92     	; 0x2252 <LCD_Send_Float+0x194>
					else
						HLCD_voidSendChar('0');
    21f6:	80 e3       	ldi	r24, 0x30	; 48
    21f8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <HLCD_voidSendChar>
    21fc:	2a c0       	rjmp	.+84     	; 0x2252 <LCD_Send_Float+0x194>
					break;
				}
				else if(temp==0)
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	88 23       	and	r24, r24
    2202:	19 f4       	brne	.+6      	; 0x220a <LCD_Send_Float+0x14c>
				{
					zero_flag=1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	04 c0       	rjmp	.+8      	; 0x2212 <LCD_Send_Float+0x154>
				}
				else
				{
					HLCD_voidSendChar(temp + '0');
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	80 5d       	subi	r24, 0xD0	; 208
    220e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <HLCD_voidSendChar>
				}
				num2ndPart = (f32) (num2ndPart - temp);
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	aa 27       	eor	r26, r26
    221a:	97 fd       	sbrc	r25, 7
    221c:	a0 95       	com	r26
    221e:	ba 2f       	mov	r27, r26
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2228:	9b 01       	movw	r18, r22
    222a:	ac 01       	movw	r20, r24
    222c:	68 85       	ldd	r22, Y+8	; 0x08
    222e:	79 85       	ldd	r23, Y+9	; 0x09
    2230:	8a 85       	ldd	r24, Y+10	; 0x0a
    2232:	9b 85       	ldd	r25, Y+11	; 0x0b
    2234:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	88 87       	std	Y+8, r24	; 0x08
    223e:	99 87       	std	Y+9, r25	; 0x09
    2240:	aa 87       	std	Y+10, r26	; 0x0a
    2242:	bb 87       	std	Y+11, r27	; 0x0b
	}
	if(((f32)num-num1stPart)>0)
	{
		HLCD_voidSendChar('.');
			u8 zero_flag=0,temp;
			for (u8 i = 1; i <= 4; i++) {
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	8f 5f       	subi	r24, 0xFF	; 255
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	85 30       	cpi	r24, 0x05	; 5
    224e:	08 f4       	brcc	.+2      	; 0x2252 <LCD_Send_Float+0x194>
    2250:	9f cf       	rjmp	.-194    	; 0x2190 <LCD_Send_Float+0xd2>
					HLCD_voidSendChar(temp + '0');
				}
				num2ndPart = (f32) (num2ndPart - temp);
			}
	}
	}
    2252:	2f 96       	adiw	r28, 0x0f	; 15
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <main>:
#include "LCD_Config.h"
#include "ADC_Interface.h"
#include <util/delay.h>

void main (void)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	a1 97       	sbiw	r28, 0x21	; 33
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
	u8 SW_State=0;
    2278:	19 a2       	std	Y+33, r1	; 0x21

	DIO_vidSetPinDir(DIO_PORTA,DIO_PIN7,DIO_OUTPUT);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	67 e0       	ldi	r22, 0x07	; 7
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 c5 09 	call	0x138a	; 0x138a <DIO_vidSetPinDir>
	DIO_vidSetPinVal(DIO_PORTA,DIO_PIN7,DIO_LOW);
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	67 e0       	ldi	r22, 0x07	; 7
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>

	//Switch internal pull up
	DIO_vidSetPinDir(DIO_PORTB,DIO_PIN6,DIO_INPUT);
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	66 e0       	ldi	r22, 0x06	; 6
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	0e 94 c5 09 	call	0x138a	; 0x138a <DIO_vidSetPinDir>
	DIO_vidSetPinVal(DIO_PORTB,DIO_PIN6,DIO_HIGH);
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	66 e0       	ldi	r22, 0x06	; 6
    229c:	41 e0       	ldi	r20, 0x01	; 1
    229e:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>

	//Relay pin
	DIO_vidSetPinDir(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	67 e0       	ldi	r22, 0x07	; 7
    22a6:	41 e0       	ldi	r20, 0x01	; 1
    22a8:	0e 94 c5 09 	call	0x138a	; 0x138a <DIO_vidSetPinDir>



	/*LCD PORT Data and Control Directions */
	DIO_vidSetPortDir(LCD_DATA_PORT,0xFF); //PORT Data Direction
    22ac:	83 e0       	ldi	r24, 0x03	; 3
    22ae:	6f ef       	ldi	r22, 0xFF	; 255
    22b0:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_vidSetPortDir>
	DIO_vidSetPinDir(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_OUTPUT); //PORT Control Direction For RS
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	65 e0       	ldi	r22, 0x05	; 5
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	0e 94 c5 09 	call	0x138a	; 0x138a <DIO_vidSetPinDir>
	DIO_vidSetPinDir(LCD_CONTROL_PORT,LCD_E_PIN,DIO_OUTPUT); //PORT Control Direction For E
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	62 e0       	ldi	r22, 0x02	; 2
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0e 94 c5 09 	call	0x138a	; 0x138a <DIO_vidSetPinDir>

	/*ADC Channel 0 as input*/
	DIO_vidSetPinDir(DIO_PORTA,DIO_PIN0,DIO_INPUT);
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	0e 94 c5 09 	call	0x138a	; 0x138a <DIO_vidSetPinDir>

	/*LCD Init*/
	HLCD_voidInit();
    22d2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <HLCD_voidInit>

	/*ADC Init*/
	ADC_vidInit();
    22d6:	0e 94 50 06 	call	0xca0	; 0xca0 <ADC_vidInit>



	u16 Volt=0;
    22da:	18 a2       	std	Y+32, r1	; 0x20
    22dc:	1f 8e       	std	Y+31, r1	; 0x1f
	u16 Digital;

	 while(1)
	 {
		 SW_State=DIO_u8GetPinVal(DIO_PORTB,DIO_PIN6);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	66 e0       	ldi	r22, 0x06	; 6
    22e2:	0e 94 55 0b 	call	0x16aa	; 0x16aa <DIO_u8GetPinVal>
    22e6:	89 a3       	std	Y+33, r24	; 0x21

		 if (SW_State==1)
    22e8:	89 a1       	ldd	r24, Y+33	; 0x21
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <main+0x8c>
    22ee:	a6 c0       	rjmp	.+332    	; 0x243c <main+0x1d8>
		 {
				DIO_vidSetPinVal(DIO_PORTB,DIO_PIN7,DIO_LOW);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	67 e0       	ldi	r22, 0x07	; 7
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>
			Digital= ADC_u16GetADCRead(0);
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	0e 94 82 06 	call	0xd04	; 0xd04 <ADC_u16GetADCRead>
    2300:	9e 8f       	std	Y+30, r25	; 0x1e
    2302:	8d 8f       	std	Y+29, r24	; 0x1d
			Volt = ((u32)Digital*5000)/1024;
    2304:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2306:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2308:	cc 01       	movw	r24, r24
    230a:	a0 e0       	ldi	r26, 0x00	; 0
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	28 e8       	ldi	r18, 0x88	; 136
    2310:	33 e1       	ldi	r19, 0x13	; 19
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 c4 12 	call	0x2588	; 0x2588 <__mulsi3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	07 2e       	mov	r0, r23
    2324:	7a e0       	ldi	r23, 0x0A	; 10
    2326:	b6 95       	lsr	r27
    2328:	a7 95       	ror	r26
    232a:	97 95       	ror	r25
    232c:	87 95       	ror	r24
    232e:	7a 95       	dec	r23
    2330:	d1 f7       	brne	.-12     	; 0x2326 <main+0xc2>
    2332:	70 2d       	mov	r23, r0
    2334:	98 a3       	std	Y+32, r25	; 0x20
    2336:	8f 8f       	std	Y+31, r24	; 0x1f
			HLCD_voidSendCommand(LCD_CLEAR);
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <HLCD_voidSendCommand>
			HLCD_voidSendString(" 5 Volt Mode:");
    233e:	80 e6       	ldi	r24, 0x60	; 96
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendString>
			HLCD_voidGotoxy(0,1);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	61 e0       	ldi	r22, 0x01	; 1
    234a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <HLCD_voidGotoxy>
			LCD_Send_Num(Volt);
    234e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2350:	98 a1       	ldd	r25, Y+32	; 0x20
    2352:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_Send_Num>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	aa e7       	ldi	r26, 0x7A	; 122
    235c:	b4 e4       	ldi	r27, 0x44	; 68
    235e:	89 8f       	std	Y+25, r24	; 0x19
    2360:	9a 8f       	std	Y+26, r25	; 0x1a
    2362:	ab 8f       	std	Y+27, r26	; 0x1b
    2364:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2366:	69 8d       	ldd	r22, Y+25	; 0x19
    2368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a ef       	ldi	r20, 0xFA	; 250
    2374:	54 e4       	ldi	r21, 0x44	; 68
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8d 8b       	std	Y+21, r24	; 0x15
    2380:	9e 8b       	std	Y+22, r25	; 0x16
    2382:	af 8b       	std	Y+23, r26	; 0x17
    2384:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2386:	6d 89       	ldd	r22, Y+21	; 0x15
    2388:	7e 89       	ldd	r23, Y+22	; 0x16
    238a:	8f 89       	ldd	r24, Y+23	; 0x17
    238c:	98 8d       	ldd	r25, Y+24	; 0x18
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239a:	88 23       	and	r24, r24
    239c:	2c f4       	brge	.+10     	; 0x23a8 <main+0x144>
		__ticks = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9c 8b       	std	Y+20, r25	; 0x14
    23a4:	8b 8b       	std	Y+19, r24	; 0x13
    23a6:	3f c0       	rjmp	.+126    	; 0x2426 <main+0x1c2>
	else if (__tmp > 65535)
    23a8:	6d 89       	ldd	r22, Y+21	; 0x15
    23aa:	7e 89       	ldd	r23, Y+22	; 0x16
    23ac:	8f 89       	ldd	r24, Y+23	; 0x17
    23ae:	98 8d       	ldd	r25, Y+24	; 0x18
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	3f ef       	ldi	r19, 0xFF	; 255
    23b4:	4f e7       	ldi	r20, 0x7F	; 127
    23b6:	57 e4       	ldi	r21, 0x47	; 71
    23b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23bc:	18 16       	cp	r1, r24
    23be:	4c f5       	brge	.+82     	; 0x2412 <main+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c0:	69 8d       	ldd	r22, Y+25	; 0x19
    23c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e2       	ldi	r20, 0x20	; 32
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9c 8b       	std	Y+20, r25	; 0x14
    23e6:	8b 8b       	std	Y+19, r24	; 0x13
    23e8:	0f c0       	rjmp	.+30     	; 0x2408 <main+0x1a4>
    23ea:	88 ec       	ldi	r24, 0xC8	; 200
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9a 8b       	std	Y+18, r25	; 0x12
    23f0:	89 8b       	std	Y+17, r24	; 0x11
    23f2:	89 89       	ldd	r24, Y+17	; 0x11
    23f4:	9a 89       	ldd	r25, Y+18	; 0x12
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <main+0x192>
    23fa:	9a 8b       	std	Y+18, r25	; 0x12
    23fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	9c 89       	ldd	r25, Y+20	; 0x14
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2408:	8b 89       	ldd	r24, Y+19	; 0x13
    240a:	9c 89       	ldd	r25, Y+20	; 0x14
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	69 f7       	brne	.-38     	; 0x23ea <main+0x186>
    2410:	66 cf       	rjmp	.-308    	; 0x22de <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2412:	6d 89       	ldd	r22, Y+21	; 0x15
    2414:	7e 89       	ldd	r23, Y+22	; 0x16
    2416:	8f 89       	ldd	r24, Y+23	; 0x17
    2418:	98 8d       	ldd	r25, Y+24	; 0x18
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9c 8b       	std	Y+20, r25	; 0x14
    2424:	8b 8b       	std	Y+19, r24	; 0x13
    2426:	8b 89       	ldd	r24, Y+19	; 0x13
    2428:	9c 89       	ldd	r25, Y+20	; 0x14
    242a:	98 8b       	std	Y+16, r25	; 0x10
    242c:	8f 87       	std	Y+15, r24	; 0x0f
    242e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2430:	98 89       	ldd	r25, Y+16	; 0x10
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <main+0x1ce>
    2436:	98 8b       	std	Y+16, r25	; 0x10
    2438:	8f 87       	std	Y+15, r24	; 0x0f
    243a:	51 cf       	rjmp	.-350    	; 0x22de <main+0x7a>
			_delay_ms(1000);
		 }
		 else
		 {
			DIO_vidSetPinVal(DIO_PORTB,DIO_PIN7,DIO_HIGH);
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	67 e0       	ldi	r22, 0x07	; 7
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	0e 94 bd 08 	call	0x117a	; 0x117a <DIO_vidSetPinVal>

			Digital= ADC_u16GetADCRead(0);
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	0e 94 82 06 	call	0xd04	; 0xd04 <ADC_u16GetADCRead>
    244c:	9e 8f       	std	Y+30, r25	; 0x1e
    244e:	8d 8f       	std	Y+29, r24	; 0x1d
			Volt = ((u32)Digital*5000)/512;
    2450:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2452:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2454:	cc 01       	movw	r24, r24
    2456:	a0 e0       	ldi	r26, 0x00	; 0
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	28 e8       	ldi	r18, 0x88	; 136
    245c:	33 e1       	ldi	r19, 0x13	; 19
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 c4 12 	call	0x2588	; 0x2588 <__mulsi3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	07 2e       	mov	r0, r23
    2470:	79 e0       	ldi	r23, 0x09	; 9
    2472:	b6 95       	lsr	r27
    2474:	a7 95       	ror	r26
    2476:	97 95       	ror	r25
    2478:	87 95       	ror	r24
    247a:	7a 95       	dec	r23
    247c:	d1 f7       	brne	.-12     	; 0x2472 <main+0x20e>
    247e:	70 2d       	mov	r23, r0
    2480:	98 a3       	std	Y+32, r25	; 0x20
    2482:	8f 8f       	std	Y+31, r24	; 0x1f
			HLCD_voidSendCommand(LCD_CLEAR);
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <HLCD_voidSendCommand>
			HLCD_voidSendString(" 10 Volt Mode:");
    248a:	8e e6       	ldi	r24, 0x6E	; 110
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendString>
			HLCD_voidGotoxy(0,1);
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <HLCD_voidGotoxy>
			LCD_Send_Num(Volt);
    249a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    249c:	98 a1       	ldd	r25, Y+32	; 0x20
    249e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_Send_Num>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	aa e7       	ldi	r26, 0x7A	; 122
    24a8:	b4 e4       	ldi	r27, 0x44	; 68
    24aa:	8b 87       	std	Y+11, r24	; 0x0b
    24ac:	9c 87       	std	Y+12, r25	; 0x0c
    24ae:	ad 87       	std	Y+13, r26	; 0x0d
    24b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a ef       	ldi	r20, 0xFA	; 250
    24c0:	54 e4       	ldi	r21, 0x44	; 68
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	8f 83       	std	Y+7, r24	; 0x07
    24cc:	98 87       	std	Y+8, r25	; 0x08
    24ce:	a9 87       	std	Y+9, r26	; 0x09
    24d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <main+0x290>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	3f c0       	rjmp	.+126    	; 0x2572 <main+0x30e>
	else if (__tmp > 65535)
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	3f ef       	ldi	r19, 0xFF	; 255
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	57 e4       	ldi	r21, 0x47	; 71
    2504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	4c f5       	brge	.+82     	; 0x255e <main+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	6b 85       	ldd	r22, Y+11	; 0x0b
    250e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2510:	8d 85       	ldd	r24, Y+13	; 0x0d
    2512:	9e 85       	ldd	r25, Y+14	; 0x0e
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	0f c0       	rjmp	.+30     	; 0x2554 <main+0x2f0>
    2536:	88 ec       	ldi	r24, 0xC8	; 200
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <main+0x2de>
    2546:	9c 83       	std	Y+4, r25	; 0x04
    2548:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	9e 83       	std	Y+6, r25	; 0x06
    2552:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	69 f7       	brne	.-38     	; 0x2536 <main+0x2d2>
    255c:	c0 ce       	rjmp	.-640    	; 0x22de <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	9a 83       	std	Y+2, r25	; 0x02
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <main+0x31a>
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	ab ce       	rjmp	.-682    	; 0x22de <main+0x7a>

00002588 <__mulsi3>:
    2588:	62 9f       	mul	r22, r18
    258a:	d0 01       	movw	r26, r0
    258c:	73 9f       	mul	r23, r19
    258e:	f0 01       	movw	r30, r0
    2590:	82 9f       	mul	r24, r18
    2592:	e0 0d       	add	r30, r0
    2594:	f1 1d       	adc	r31, r1
    2596:	64 9f       	mul	r22, r20
    2598:	e0 0d       	add	r30, r0
    259a:	f1 1d       	adc	r31, r1
    259c:	92 9f       	mul	r25, r18
    259e:	f0 0d       	add	r31, r0
    25a0:	83 9f       	mul	r24, r19
    25a2:	f0 0d       	add	r31, r0
    25a4:	74 9f       	mul	r23, r20
    25a6:	f0 0d       	add	r31, r0
    25a8:	65 9f       	mul	r22, r21
    25aa:	f0 0d       	add	r31, r0
    25ac:	99 27       	eor	r25, r25
    25ae:	72 9f       	mul	r23, r18
    25b0:	b0 0d       	add	r27, r0
    25b2:	e1 1d       	adc	r30, r1
    25b4:	f9 1f       	adc	r31, r25
    25b6:	63 9f       	mul	r22, r19
    25b8:	b0 0d       	add	r27, r0
    25ba:	e1 1d       	adc	r30, r1
    25bc:	f9 1f       	adc	r31, r25
    25be:	bd 01       	movw	r22, r26
    25c0:	cf 01       	movw	r24, r30
    25c2:	11 24       	eor	r1, r1
    25c4:	08 95       	ret

000025c6 <__divmodhi4>:
    25c6:	97 fb       	bst	r25, 7
    25c8:	09 2e       	mov	r0, r25
    25ca:	07 26       	eor	r0, r23
    25cc:	0a d0       	rcall	.+20     	; 0x25e2 <__divmodhi4_neg1>
    25ce:	77 fd       	sbrc	r23, 7
    25d0:	04 d0       	rcall	.+8      	; 0x25da <__divmodhi4_neg2>
    25d2:	0c d0       	rcall	.+24     	; 0x25ec <__udivmodhi4>
    25d4:	06 d0       	rcall	.+12     	; 0x25e2 <__divmodhi4_neg1>
    25d6:	00 20       	and	r0, r0
    25d8:	1a f4       	brpl	.+6      	; 0x25e0 <__divmodhi4_exit>

000025da <__divmodhi4_neg2>:
    25da:	70 95       	com	r23
    25dc:	61 95       	neg	r22
    25de:	7f 4f       	sbci	r23, 0xFF	; 255

000025e0 <__divmodhi4_exit>:
    25e0:	08 95       	ret

000025e2 <__divmodhi4_neg1>:
    25e2:	f6 f7       	brtc	.-4      	; 0x25e0 <__divmodhi4_exit>
    25e4:	90 95       	com	r25
    25e6:	81 95       	neg	r24
    25e8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ea:	08 95       	ret

000025ec <__udivmodhi4>:
    25ec:	aa 1b       	sub	r26, r26
    25ee:	bb 1b       	sub	r27, r27
    25f0:	51 e1       	ldi	r21, 0x11	; 17
    25f2:	07 c0       	rjmp	.+14     	; 0x2602 <__udivmodhi4_ep>

000025f4 <__udivmodhi4_loop>:
    25f4:	aa 1f       	adc	r26, r26
    25f6:	bb 1f       	adc	r27, r27
    25f8:	a6 17       	cp	r26, r22
    25fa:	b7 07       	cpc	r27, r23
    25fc:	10 f0       	brcs	.+4      	; 0x2602 <__udivmodhi4_ep>
    25fe:	a6 1b       	sub	r26, r22
    2600:	b7 0b       	sbc	r27, r23

00002602 <__udivmodhi4_ep>:
    2602:	88 1f       	adc	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	5a 95       	dec	r21
    2608:	a9 f7       	brne	.-22     	; 0x25f4 <__udivmodhi4_loop>
    260a:	80 95       	com	r24
    260c:	90 95       	com	r25
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	08 95       	ret

00002614 <__prologue_saves__>:
    2614:	2f 92       	push	r2
    2616:	3f 92       	push	r3
    2618:	4f 92       	push	r4
    261a:	5f 92       	push	r5
    261c:	6f 92       	push	r6
    261e:	7f 92       	push	r7
    2620:	8f 92       	push	r8
    2622:	9f 92       	push	r9
    2624:	af 92       	push	r10
    2626:	bf 92       	push	r11
    2628:	cf 92       	push	r12
    262a:	df 92       	push	r13
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	ca 1b       	sub	r28, r26
    263e:	db 0b       	sbc	r29, r27
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	09 94       	ijmp

0000264c <__epilogue_restores__>:
    264c:	2a 88       	ldd	r2, Y+18	; 0x12
    264e:	39 88       	ldd	r3, Y+17	; 0x11
    2650:	48 88       	ldd	r4, Y+16	; 0x10
    2652:	5f 84       	ldd	r5, Y+15	; 0x0f
    2654:	6e 84       	ldd	r6, Y+14	; 0x0e
    2656:	7d 84       	ldd	r7, Y+13	; 0x0d
    2658:	8c 84       	ldd	r8, Y+12	; 0x0c
    265a:	9b 84       	ldd	r9, Y+11	; 0x0b
    265c:	aa 84       	ldd	r10, Y+10	; 0x0a
    265e:	b9 84       	ldd	r11, Y+9	; 0x09
    2660:	c8 84       	ldd	r12, Y+8	; 0x08
    2662:	df 80       	ldd	r13, Y+7	; 0x07
    2664:	ee 80       	ldd	r14, Y+6	; 0x06
    2666:	fd 80       	ldd	r15, Y+5	; 0x05
    2668:	0c 81       	ldd	r16, Y+4	; 0x04
    266a:	1b 81       	ldd	r17, Y+3	; 0x03
    266c:	aa 81       	ldd	r26, Y+2	; 0x02
    266e:	b9 81       	ldd	r27, Y+1	; 0x01
    2670:	ce 0f       	add	r28, r30
    2672:	d1 1d       	adc	r29, r1
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	ed 01       	movw	r28, r26
    2680:	08 95       	ret

00002682 <_exit>:
    2682:	f8 94       	cli

00002684 <__stop_program>:
    2684:	ff cf       	rjmp	.-2      	; 0x2684 <__stop_program>
